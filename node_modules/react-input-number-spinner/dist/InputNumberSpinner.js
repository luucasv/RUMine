"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const defaultDivStyle = {
    marginTop: '10px',
    width: '300px'
};
const defaultButtonStyle = {
    height: '30px',
    width: '15%',
    border: 0,
    backgroundColor: 'rgba(0,0,0,.075)',
    fontSize: '20px'
};
const defaultLabelStyle = {
    paddingLeft: '5px',
    paddingBottom: '5px',
    textAlign: 'left'
};
const defaultInputBoxStyle = {
    width: '65%',
    textAlign: 'center',
    height: '30px'
};
function formatNumber(num, format) {
    return num.toFixed(format);
}
class NumberSpinner extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            displayValue: formatNumber(0, props.format)
        };
    }
    decrement() {
        const currentValue = Number(this.state.displayValue);
        const result = Number(currentValue - this.props.step);
        if (result >= this.props.min) {
            this.setState({
                displayValue: formatNumber(result, this.props.format)
            });
        }
    }
    increment() {
        const currentValue = Number(this.state.displayValue);
        const result = Number(currentValue + this.props.step);
        this.setState({
            displayValue: formatNumber(result, this.props.format)
        });
    }
    handleInputChange(event) {
        event.preventDefault();
        const inputValue = event.target.value;
        if (Number.isNaN(Number(inputValue))) {
            return;
        }
        this.setState({
            displayValue: inputValue
        });
    }
    handleInputOnBlur(event) {
        this.setState({
            displayValue: formatNumber(Number(this.state.displayValue), this.props.format)
        });
    }
    render() {
        const outterDivStyle = Object.assign({}, defaultDivStyle, this.props.componentStyle ? this.props.componentStyle : {});
        const leftButtonStyle = Object.assign({}, defaultButtonStyle, this.props.leftButtonStyle);
        const rightButtonStyle = Object.assign({}, defaultButtonStyle, this.props.rightButtonStyle);
        const innerDivStyle = {
            width: '100%',
            display: 'flex'
        };
        return (React.createElement("div", { style: outterDivStyle },
            this.props.label ? React.createElement("div", { style: defaultLabelStyle }, this.props.label) : null,
            React.createElement("div", { style: innerDivStyle },
                React.createElement("button", { style: leftButtonStyle, onClick: () => {
                        this.decrement();
                    }, disabled: this.state.displayValue <= this.props.min, className: this.props.buttonClassName ? this.props.buttonClassName : '' }, "-"),
                React.createElement("input", { type: "text", value: this.state.displayValue, onChange: event => {
                        this.handleInputChange(event);
                    }, onBlur: event => {
                        this.handleInputOnBlur(event);
                    }, className: this.props.inputBoxClassName ? this.props.inputBoxClassName : '', style: defaultInputBoxStyle }),
                React.createElement("button", { style: rightButtonStyle, onClick: () => {
                        this.increment();
                    }, className: this.props.buttonClassName ? this.props.buttonClassName : '' }, "+"))));
    }
}
NumberSpinner.defaultProps = {
    min: -Infinity,
    max: Infinity,
    format: 0,
    componentStyle: {},
    inputBoxClassName: 'defaultInputNumberWidgetInputClass',
    buttonClassName: 'defaultInputNumberWidgetClass',
    leftButtonStyle: null,
    rightButtonStyle: null,
    label: null
};
exports.default = NumberSpinner;
//# sourceMappingURL=InputNumberSpinner.js.map